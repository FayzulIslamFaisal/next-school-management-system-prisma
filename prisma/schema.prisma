
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserSex {
  MALE
  FEMALE
}

enum Day {
  SATURDAY
  SUNDAY
  MONDAY
  TUESDAY
  WEDNESDAY
  THURSDAY
  FRIDAY
}


model Admin {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String @unique
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Student {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String @unique
  name       String
  surname    String
  email      String? @unique
  phone      String?  @unique
  address    String
  img        String?
  bloodtype  String
  sex        UserSex   @default(MALE)

  parentId   String   @db.ObjectId
  parent     Parent   @relation(fields: [parentId], references: [id])
  classId String @db.ObjectId
  classes Classes @relation(fields: [classId], references: [id])
  gradeId String @db.ObjectId
  grades Grade @relation(fields: [gradeId], references: [id])
  attendances Attendance[]
  results Result[]

  createdAt  DateTime  @default(now())
  updatedAt  DateTime  @updatedAt
}


model Teacher {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String @unique
  name       String
  surname    String
  email      String? @unique
  phone      String?  @unique
  address    String
  img        String?
  bloodtype  String
  sex        UserSex   @default(MALE)

  // subjects Subject[]
  teacherSubjects TeacherSubject[]
  lessons Lesson[]
  classes Classes[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Parent {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  username   String @unique
  name       String
  surname    String
  email      String? @unique
  phone      String @unique
  address    String

  students Student[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Grade {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  level Int @unique

  students Student[]
  classes Classes[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Classes {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  capacity Int

  lessons Lesson[]
  studends Student[]
  supervisorId String @db.ObjectId
  supervisor Teacher @relation(fields: [supervisorId], references: [id])
  gradeId String @db.ObjectId
  grades Grade @relation(fields: [gradeId], references: [id])
  announcements Announcement[]
  events Event[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Subject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name String @unique
  teacherSubjects TeacherSubject[]
  lessons Lesson []
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Lesson {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  name String
  day Day @default(SUNDAY)

  classesId String @db.ObjectId
  classes Classes @relation(fields: [classesId], references: [id])
  subjectId String @db.ObjectId
  subjects Subject @relation(fields: [subjectId],references: [id])
  teacherId String @db.ObjectId
  teachers Teacher @relation(fields: [teacherId], references: [id])
  exams Exam[]
  assignments Assignment[]
  attendances Attendance[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Exam {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  startTime DateTime
  endtime DateTime

  lessonId String @db.ObjectId
  lessons Lesson @relation(fields: [lessonId], references: [id])
  results Result[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}
model Assignment {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  startDate DateTime
  dueDate DateTime

  lessonId String @db.ObjectId
  lessons Lesson @relation(fields: [lessonId], references: [id])
  results Result[]

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Result {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  score Int

  examId String? @db.ObjectId
  exams Exam? @relation(fields: [examId], references: [id])
  assignmentI String? @db.ObjectId
  assignments Assignment? @relation(fields: [assignmentI], references: [id])
  studentId String @db.ObjectId
  students Student @relation(fields: [studentId],references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Attendance {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  date DateTime
  present Boolean
  
  studentId String @db.ObjectId
  students Student @relation(fields: [studentId], references: [id])
  lessonId String @db.ObjectId
  lessons Lesson @relation(fields: [lessonId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Event {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  startTime DateTime
  endTime DateTime

  classesId String? @db.ObjectId
  classes Classes? @relation(fields: [classesId], references: [id])
  
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}

model Announcement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  title String
  description String
  date DateTime

  classesId String? @db.ObjectId
  classes Classes? @relation(fields: [classesId], references: [id])

  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
}


model TeacherSubject {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId

  teacherId  String   @db.ObjectId
  subjectId  String   @db.ObjectId

  teacher    Teacher  @relation(fields: [teacherId], references: [id])
  subject    Subject  @relation(fields: [subjectId], references: [id])

}